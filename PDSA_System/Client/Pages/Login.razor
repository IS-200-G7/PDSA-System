@page "/Login";
@using PDSA_System.Client.Models
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<EditForm Model=@_data OnSubmit=@FormSubmitted>
	<DataAnnotationsValidator />
	@if (showError)
	{
		<div class="alert alert-danger" role="alert">
			Feil e-postadresse eller passord
		</div>
	}
	<div class="logincontainer">
		<center>
			<br />
			<h2 style="color:#777777"><b>Login</b></h2>
			<br />
			<input type="text" class="" id="epostInput" name="epostInput" @bind-value="@_data.Brukernavn" placeholder="E-postadresse" />
			<input type="password" name="passwordInput" id="passwordInput" @bind-value="@_data.Passord" class="" placeholder="Passord" />
			<SubmitInput />

		</center>
	</div>


</EditForm>

@code {
	LoginData _data = new LoginData();
	bool showError = false;

	private async void CreateCookie(string name, string value, int days)
	{
		var test = await JsRuntime.InvokeAsync<string>("methods.CreateCookie", name, value, days);
	}

	void FormSubmitted(EditContext editContext)
	{
		bool formIsValid = editContext.Validate();
		showError = false;

		HttpClient.PostAsJsonAsync("/auth/login", _data).ContinueWith(task =>
		{
			if (task.Result.IsSuccessStatusCode)
			{
				Console.WriteLine("Success");
				var token = task.Result.Content.ReadAsStringAsync().Result;

				LocalStorage.SetItemAsStringAsync("token", token);
				//Linje nedenfor brukes av TeamlederPage. Må endres manuelt foreløpig. Teams må inn i local storage.
				//Endre string data for å endre team.
				LocalStorage.SetItemAsStringAsync("teamId", "4");
				NavigationManager.NavigateTo("/", true);
			}
			else
			{
				showError = true;
				StateHasChanged();
				Console.WriteLine("Failed");
			}
		});
	}

}
